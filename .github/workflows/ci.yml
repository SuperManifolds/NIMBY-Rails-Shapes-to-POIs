name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Install templ
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Generate templates
      run: templ generate

    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install templ
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Generate templates
      run: templ generate

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v2.3.1
        args: --timeout=3m

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows ARM64 is not commonly used
          - goos: windows
            goarch: arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install templ
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Generate templates
      run: templ generate

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p build
        if [ "$GOOS" = "windows" ]; then
          go build -o build/nimby_shapetopoi-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/nimby_shapetopoi
        else
          go build -o build/nimby_shapetopoi-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/nimby_shapetopoi
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nimby_shapetopoi-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run govulncheck (Official Go vulnerability scanner)
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...